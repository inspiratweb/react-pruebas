class CommentBox extends React.Component {
  constructor() {
    super();

    this.state = {
      showComments: false,
      comments: [
        { id: 1, author: 'First comment!', body: 'content for first comment' },
        { id: 2, author: 'Second comment!', body: 'content for second comment' }
      ]
    }
  }

  render() {
    const comments = this._getComments();
    let commentNodes;
    let buttonText = 'Show comments';

    if (this.state.showComments) {
      buttonText = 'Hide comments';
      // add code for displaying comments
      commentNodes = React.createElement("div", null, comments);
    }

    return (
      React.createElement("section", null, 
        React.createElement("h3", null, "Comment box"), 
        React.createElement(CommentForm, {addComment: this._addComment.bind(this)}), 
        React.createElement("p", null, this._getCommentsTitle(comments.length)), 
        React.createElement("button", {onClick: this._handleClick.bind(this)}, buttonText), 
        commentNodes
      )
    );
  }

  _getComments() {
    return this.state.comments.map((comment)=> {
      return (
        React.createElement(Comment, {
          author: comment.author, 
          body: comment.body, 
          key: comment.id})
      );
    });
  }

  _getCommentsTitle(commentCount) {
    if (commentCount === 0) {
      return 'No comments yet';
    } else if (commentCount === 1) {
      return '1 comment'
    } else {
      return `${commentCount} comments`;
    }
  }

  _handleClick() {
    this.setState({
      showComments: !this.state.showComments
    })
  }

  _addComment(author, body) {
    const comment = {
      id: this.state.comments.length + 1,
      author, 
      body
    };

    // if comments are hidden we must show them
    this.setState({
      comments: this.state.comments.concat([comment]),
      showComments: true
    });
  }
}

class Comment extends React.Component {
	render() {
		return (
      React.createElement("article", null, 
        React.createElement("h3", {className: "comment-title"}, 
          this.props.author
        ), 
        React.createElement("p", {className: "comment-body"}, 
          this.props.body
        )
      )
    );
	}
}

class CommentForm extends React.Component {
  render() {
    return (
      React.createElement("form", {onSubmit: this._handleSubmit.bind(this)}, 
        React.createElement("label", null, "Join the discussion"), 
        React.createElement("div", null, 
          React.createElement("input", {type: "text", placeholder: "Name:", ref: (input) => this._author = input}), 
          React.createElement("textarea", {placeholder: "Comment:", ref: (textarea) => this._body = textarea})
        ), 
        React.createElement("div", null, 
          React.createElement("button", {type: "submit"}, 
            "Post comment"
          )
        )
      )
    );
  }

  _handleSubmit(event) {
    event.preventDefault();

    let author = this._author;
    let body = this._body;

    this.props.addComment(author.value, body.value);
  }
}

ReactDOM.render(
	React.createElement(CommentBox, null), document.getElementById('story-app')
);
